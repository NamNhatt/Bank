import customtkinter as ctk
import requests
import threading
from PIL import Image
import os
import speech_recognition as sr # Th√™m th∆∞ vi·ªán nh·∫≠n d·∫°ng gi·ªçng n√≥i

# --- C·∫•u h√¨nh ---
API_URL = "http://localhost:8000/api/v1/chat/query"
APP_TITLE = "Tr·ª£ l√Ω ·∫¢o Ng√¢n h√†ng"
WINDOW_SIZE = "800x600"

# --- M√†u s·∫Øc v√† Font ch·ªØ ---
BG_COLOR = "#242424"
INPUT_BG_COLOR = "#343638"
USER_BUBBLE_COLOR = "#2b59b5"
AI_BUBBLE_COLOR = "#3e4042"
TEXT_COLOR = "white"
FONT_FAMILY = "Roboto"

class ChatApp(ctk.CTk):
    def __init__(self):
        super().__init__()

        self.title(APP_TITLE)
        self.geometry(WINDOW_SIZE)
        self.configure(fg_color=BG_COLOR)

        self.grid_rowconfigure(0, weight=1)
        self.grid_columnconfigure(0, weight=1)

        # --- T·∫°o m·ªôt khung ch√≠nh ƒë·ªÉ ch·ª©a t·∫•t c·∫£ c√°c th√†nh ph·∫ßn kh√°c ---
        main_frame = ctk.CTkFrame(self, fg_color="transparent")
        main_frame.grid(row=0, column=0, sticky="nsew")
        main_frame.grid_rowconfigure(0, weight=1)
        main_frame.grid_columnconfigure(0, weight=1)
        
        # --- T·∫°o c√°c th√†nh ph·∫ßn giao di·ªán v√† ƒë·∫∑t ch√∫ng v√†o main_frame ---
        self.chat_frame = ctk.CTkScrollableFrame(main_frame, fg_color="transparent")
        self.chat_frame.grid(row=0, column=0, sticky="nsew", padx=10, pady=10)
        
        # ‚úÖ THAY ƒê·ªîI: X√≥a d√≤ng code g√¢y l·ªói ·ªü ƒë√¢y.
        # CTkScrollableFrame kh√¥ng c√≥ thu·ªôc t√≠nh grid_column_configure.
        # B·ªë c·ª•c c·ªßa c√°c bubble b√™n trong ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω khi th√™m ch√∫ng v√†o.

        input_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        input_frame.grid(row=1, column=0, sticky="ew", padx=10, pady=10)
        input_frame.grid_columnconfigure(0, weight=1)

        self.send_icon = self.load_icon("send_icon.png")
        self.mic_icon = self.load_icon("mic_icon.png")

        self.user_input_entry = ctk.CTkEntry(
            input_frame,
            placeholder_text="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n...",
            font=(FONT_FAMILY, 16), height=40, corner_radius=15,
            fg_color=INPUT_BG_COLOR, border_width=0
        )
        self.user_input_entry.grid(row=0, column=0, sticky="ew")
        self.user_input_entry.bind("<Return>", self.on_send_pressed)

        self.send_button = ctk.CTkButton(
            input_frame, image=self.send_icon, text="G·ª≠i",
            width=80, height=36, fg_color=USER_BUBBLE_COLOR,
            hover_color="#1e418a", command=self.on_send_pressed
        )
        self.send_button.grid(row=0, column=1, padx=(10, 5))

        self.mic_button = ctk.CTkButton(
            input_frame, image=self.mic_icon, text="üéôÔ∏è",
            width=40, height=36, font=(FONT_FAMILY, 18),
            fg_color="transparent", hover_color="#4a4d50",
            command=self.on_mic_pressed # G√°n l·ªánh m·ªõi
        )
        self.mic_button.grid(row=0, column=2, padx=(0, 0))

        # --- Kh·ªüi t·∫°o c√°c bi·∫øn ---
        self.chat_history = []
        self.ai_bubble_label = None
        self.add_chat_bubble("ai", "Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?")

    def load_icon(self, filename, size=(20, 20)):
        if os.path.exists(filename):
            try:
                return ctk.CTkImage(Image.open(filename), size=size)
            except Exception as e:
                print(f"L·ªói khi t·∫£i ·∫£nh '{filename}': {e}")
        print(f"C·∫£nh b√°o: Kh√¥ng t√¨m th·∫•y file icon '{filename}'.")
        return None

    def add_chat_bubble(self, role, text):
        if role == "user":
            bubble_color = USER_BUBBLE_COLOR
            justify = "right"; anchor = "e"; padx = (50, 0)
        else:
            bubble_color = AI_BUBBLE_COLOR
            justify = "left"; anchor = "w"; padx = (0, 50)
            
        bubble_frame = ctk.CTkFrame(self.chat_frame, fg_color=bubble_color, corner_radius=15)
        # Khung bubble s·∫Ω t·ª± ƒë·ªông co gi√£n theo chi·ªÅu r·ªông n·∫øu c·∫ßn
        bubble_frame.pack(anchor=anchor, padx=padx, pady=4, fill="x")
        
        message_label = ctk.CTkLabel(
            bubble_frame, text=text, font=(FONT_FAMILY, 16),
            wraplength=500, justify=justify, text_color=TEXT_COLOR
        )
        message_label.pack(padx=15, pady=10)
        return message_label
    
    # --- T√çCH H·ª¢P CHUY·ªÇN ƒê·ªîI GI·ªåNG N√ìI ---
    
    def on_mic_pressed(self):
        """X·ª≠ l√Ω giao di·ªán v√† b·∫Øt ƒë·∫ßu lu·ªìng nh·∫≠n d·∫°ng gi·ªçng n√≥i."""
        self.user_input_entry.delete(0, "end")
        self.user_input_entry.insert(0, "ƒêang l·∫Øng nghe, m·ªùi b·∫°n n√≥i...")
        self.mic_button.configure(state="disabled", fg_color="#555555")
        self.send_button.configure(state="disabled")

        threading.Thread(target=self.recognize_and_send, daemon=True).start()

    def recognize_and_send(self):
        """L·∫Øng nghe t·ª´ micro, chuy·ªÉn th√†nh vƒÉn b·∫£n v√† t·ª± ƒë·ªông g·ª≠i ƒëi."""
        recognizer = sr.Recognizer()
        with sr.Microphone() as source:
            try:
                recognizer.adjust_for_ambient_noise(source, duration=0.5)
                print("Listening...")
                audio = recognizer.listen(source, timeout=5, phrase_time_limit=10)
                
                print("Recognizing...")
                # S·ª≠ d·ª•ng Google Web Speech API ƒë·ªÉ nh·∫≠n d·∫°ng ti·∫øng Vi·ªát
                text = recognizer.recognize_google(audio, language="vi-VN")
                print(f"B·∫°n ƒë√£ n√≥i: {text}")

                self.after(0, self.process_recognized_text, text)
            except sr.WaitTimeoutError:
                self.after(0, self.update_input_placeholder, "Kh√¥ng nghe th·∫•y g√¨, th·ª≠ l·∫°i.")
            except sr.UnknownValueError:
                self.after(0, self.update_input_placeholder, "Kh√¥ng th·ªÉ nh·∫≠n d·∫°ng gi·ªçng n√≥i.")
            except sr.RequestError as e:
                self.after(0, self.update_input_placeholder, f"L·ªói d·ªãch v·ª•: {e}")
            finally:
                self.after(0, self.reset_input_state)

    def process_recognized_text(self, text):
        """ƒêi·ªÅn vƒÉn b·∫£n ƒë√£ nh·∫≠n d·∫°ng v√†o √¥ v√† t·ª± ƒë·ªông g·ª≠i."""
        self.user_input_entry.delete(0, "end")
        self.user_input_entry.insert(0, text)
        self.on_send_pressed()

    def update_input_placeholder(self, text):
        """Hi·ªÉn th·ªã th√¥ng b√°o tr·∫°ng th√°i/l·ªói trong √¥ nh·∫≠p li·ªáu."""
        self.user_input_entry.delete(0, "end")
        self.user_input_entry.insert(0, text)

    def reset_input_state(self):
        """K√≠ch ho·∫°t l·∫°i c√°c n√∫t v√† x√≥a placeholder text n·∫øu c·∫ßn."""
        self.mic_button.configure(state="normal", fg_color="transparent")
        self.send_button.configure(state="normal")
        current_text = self.user_input_entry.get()
        if "ƒêang l·∫Øng nghe" in current_text or "L·ªói" in current_text or "Kh√¥ng" in current_text:
            self.user_input_entry.delete(0, "end")
            
    # --- C√ÅC H√ÄM X·ª¨ L√ù CHAT C√ì S·∫¥N ---

    def on_send_pressed(self, event=None):
        user_text = self.user_input_entry.get()
        if not user_text.strip(): return
        self.add_chat_bubble("user", user_text)
        self.chat_history.append({"role": "user", "content": user_text})
        self.user_input_entry.delete(0, "end")
        self.send_button.configure(state="disabled")
        self.mic_button.configure(state="disabled")
        threading.Thread(target=self.get_ai_response, args=(user_text,)).start()

    def update_ai_bubble_text(self, chunk):
        if self.ai_bubble_label:
            current_text = self.ai_bubble_label.cget("text")
            self.ai_bubble_label.configure(text=current_text + chunk)

    def get_ai_response(self, question):
        self.ai_bubble_label = self.add_chat_bubble("ai", "")
        full_ai_response = ""
        try:
            response = requests.post(
                API_URL,
                json={"question": question, "history": self.chat_history[:-1]},
                stream=True
            )
            response.raise_for_status()
            for chunk in response.iter_content(chunk_size=None, decode_unicode=True):
                if chunk:
                    self.after(0, self.update_ai_bubble_text, chunk)
                    full_ai_response += chunk
        except requests.exceptions.RequestException as e:
            error_message = f"[L·ªói k·∫øt n·ªëi: {e}]"
            self.after(0, self.update_ai_bubble_text, error_message)
            full_ai_response = error_message
        
        self.chat_history.append({"role": "ai", "content": full_ai_response.strip()})
        self.ai_bubble_label = None
        self.after(0, self.reset_input_state)

if __name__ == "__main__":
    app = ChatApp()
    app.mainloop()

